#!/usr/bin/env ruby
require "fileutils"

APP_ROOT = File.expand_path("..", __dir__)

def system!(*args)
  system(*args, exception: true)
end

FileUtils.chdir APP_ROOT do
  # This script is a way to set up or update your development environment automatically.
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  # Add necessary setup steps to this file.

  # Install system dependencies on macOS
  if RUBY_PLATFORM =~ /darwin/
    puts "== Installing system dependencies =="
    if system("which brew > /dev/null")

      unless system("brew list zstd > /dev/null 2>&1")
        system!("brew install zstd")

        shell_rc = ENV["SHELL"].end_with?("zsh") ? "~/.zshrc" : "~/.bash_profile"
        zstd_path = `brew --prefix zstd`.strip
        export_cmd = "export LIBRARY_PATH=\"$LIBRARY_PATH:#{zstd_path}/lib/\""
        system!("echo '# Added by bin/setup for zstd' >> #{shell_rc}")
        system!("echo '#{export_cmd}' >> #{shell_rc}")
        puts "✓ Added LIBRARY_PATH to #{shell_rc}"
      else
        puts "✓ zstd is already installed"
      end

      unless system("brew list mysql-client > /dev/null 2>&1")
        system!("brew install mysql-client")
        shell_rc = ENV["SHELL"].end_with?("zsh") ? "~/.zshrc" : "~/.bash_profile"

        system!("echo '# Added by bin/setup for mysql-client' >> #{shell_rc}")
        system!("echo 'export PATH=\"/opt/homebrew/opt/mysql-client/bin:$PATH\"' >> #{shell_rc}")
        system!("echo 'export LDFLAGS=\"-L/opt/homebrew/opt/mysql-client/lib\"' >> #{shell_rc}")
        system!("echo 'export CPPFLAGS=\"-I/opt/homebrew/opt/mysql-client/include\"' >> #{shell_rc}")
        puts "✓ Added MySQL client environment variables to #{shell_rc}"
      else
        puts "✓ mysql-client is already installed"
      end
    else
      puts "⚠️  Warning: Homebrew is not installed. Skipping system dependencies installation."
      puts "   Please install Homebrew first: https://brew.sh"
    end
  end

  puts "== Installing dependencies =="
  system("bundle check") || system!("bundle install")

  # Install JavaScript dependencies
  system("yarn install --check-files")

  # puts "\n== Copying sample files =="
  # unless File.exist?("config/database.yml")
  #   FileUtils.cp "config/database.yml.sample", "config/database.yml"
  # end

  puts "\n== Starting database =="
  system!("docker compose up -d db")
  puts "  Waiting for database to be ready..."
  system!("docker compose exec -T db mysqladmin ping -h localhost -uroot -ppassword --silent")
  puts "✓ Database is ready"

  puts "\n== Preparing database =="
  system! "bin/rails db:prepare"

  puts "\n== Removing old logs and tempfiles =="
  system! "bin/rails log:clear tmp:clear"

  unless ARGV.include?("--skip-server")
    puts "\n== Starting development server =="
    STDOUT.flush # flush the output before exec(2) so that it displays
    exec "bin/dev"
  end
end
